From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: zhangyuheng <zhangyuheng@lunadeer.cn>
Date: Thu, 22 May 2025 15:33:35 +0800
Subject: [PATCH] Leaves fake player


diff --git a/io/papermc/paper/threadedregions/RegionizedServer.java b/io/papermc/paper/threadedregions/RegionizedServer.java
index 8e91ec81128bdbd5f78e1f04fe17bcbd6e5dc280..5ef86dfacc3c8e73e250155e39a709551cb6e1d4 100644
--- a/io/papermc/paper/threadedregions/RegionizedServer.java
+++ b/io/papermc/paper/threadedregions/RegionizedServer.java
@@ -326,6 +326,9 @@ public final class RegionizedServer {
 
         // player list
         MinecraftServer.getServer().getPlayerList().tick();
+
+        // Leaves FakePlayer
+        MinecraftServer.getServer().botList.networkTick();
     }
 
     private void tickPlayerSample() {
diff --git a/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java b/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
index a82d84283632342bd30bc3449983431ba43583e0..f59526f6bfa1b4af5b474f0b438513c96afb491c 100644
--- a/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
+++ b/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
@@ -39,6 +39,7 @@ public abstract class SimpleCriterionTrigger<T extends SimpleCriterionTrigger.Si
     }
 
     protected void trigger(ServerPlayer player, Predicate<T> testTrigger) {
+        if (player instanceof org.leavesmc.leaves.bot.ServerBot) return; // Leaves - bot skip
         PlayerAdvancements advancements = player.getAdvancements();
         Set<CriterionTrigger.Listener<T>> set = (Set) advancements.criterionData.get(this); // Paper - fix PlayerAdvancements leak
         if (set != null && !set.isEmpty()) {
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index 8e69876debfdbab3965fb93fe79d1125f4f21636..1d5ea43c1bc45e49ceda8accd0041189926a33bc 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -347,6 +347,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
     // Folia end - regionised ticking
 
+    public org.leavesmc.leaves.bot.BotList botList; // Leaves - fakeplayer
+
     public static <S extends MinecraftServer> S spin(Function<Thread, S> threadFunction) {
         ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.init(); // Paper - rewrite data converter system
         AtomicReference<S> atomicReference = new AtomicReference<>();
@@ -782,6 +784,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Paper end - Configurable player collision
 
+        this.getBotList().loadResume(); // Leaves - load resident bot
+
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         this.server.spark.registerCommandBeforePlugins(this.server); // Paper - spark
         this.server.spark.enableAfterPlugins(this.server); // Paper - spark
@@ -1065,6 +1069,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         LOGGER.info("Stopping server");
         Commands.COMMAND_SENDING_POOL.shutdownNow(); // Paper - Perf: Async command map building; Shutdown and don't bother finishing
+        this.getBotList().saveAll(); // Leaves - save or remove bot
         // CraftBukkit start
         if (this.server != null) {
             this.server.spark.disable(); // Paper - spark
@@ -2929,6 +2934,16 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return 0;
     }
 
+    // Leaves start - fakeplayer
+    protected void setBotList(org.leavesmc.leaves.bot.BotList botList) {
+        this.botList = botList;
+    }
+
+    public org.leavesmc.leaves.bot.BotList getBotList() {
+        return botList;
+    }
+    // Leaves end - fakeplayer
+
     public record ReloadableResources(CloseableResourceManager resourceManager, ReloadableServerResources managers) implements AutoCloseable {
         @Override
         public void close() {
diff --git a/net/minecraft/server/PlayerAdvancements.java b/net/minecraft/server/PlayerAdvancements.java
index fdeca41d40705f28864ce4443d01cd872c9d51b0..b117c24b09ba7a566b7f333d485106d188e9fb15 100644
--- a/net/minecraft/server/PlayerAdvancements.java
+++ b/net/minecraft/server/PlayerAdvancements.java
@@ -167,6 +167,7 @@ public class PlayerAdvancements {
     }
 
     public boolean award(AdvancementHolder advancement, String criterionKey) {
+        if (player instanceof org.leavesmc.leaves.bot.ServerBot) return false; // Leaves bot can't get advancement
         boolean flag = false;
         AdvancementProgress orStartProgress = this.getOrStartProgress(advancement);
         boolean isDone = orStartProgress.isDone();
diff --git a/net/minecraft/server/dedicated/DedicatedServer.java b/net/minecraft/server/dedicated/DedicatedServer.java
index c976fdad4773c2710006f3766ce01b71ef37bf3a..c75480c2bb242b6e7033c315f6bab28a7130f849 100644
--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -162,6 +162,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
 
         // Spigot start
+        this.setBotList(new org.leavesmc.leaves.bot.BotList(this)); // Leaves - fakeplayer
         this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage));
         org.spigotmc.SpigotConfig.init((java.io.File) this.options.valueOf("spigot-settings"));
         org.spigotmc.SpigotConfig.registerCommands();
diff --git a/net/minecraft/server/level/ChunkMap.java b/net/minecraft/server/level/ChunkMap.java
index 4d603fafd07141a63db22f6e5a544fabbb6b9630..68ffb04906eb094a7ead2eab53121a88f942e39d 100644
--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -1309,6 +1309,13 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                     }
                 } else if (this.seenBy.remove(player.connection)) {
                     this.serverEntity.removePairing(player);
+                    // Leaves start - render bot
+                    if (entity instanceof org.leavesmc.leaves.bot.ServerBot bot) {
+                        if (bot.needSendFakeData(player)) {
+                            bot.sendFakeData(player.connection, false);
+                        }
+                    }
+                    // Leaves end - render bot
                 }
             }
         }
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index 78a7a4b379e0b469ebde381efe748278e6d69a5a..df73319916ccd288e2a27ed33a7545b1901284a6 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -207,6 +207,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
     private final StructureCheck structureCheck;
     public final boolean tickTime; // Folia - region threading
     private final RandomSequences randomSequences;
+    final List<ServerPlayer> realPlayers = Lists.newArrayList(); // Leaves - skip
 
     // CraftBukkit start
     public final LevelStorageSource.LevelStorageAccess levelStorageAccess;
@@ -2360,6 +2361,12 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         return this.players;
     }
 
+    // Leaves start - fakeplayer skip
+    public List<ServerPlayer> realPlayers() {
+        return this.realPlayers;
+    }
+    // Leaves end - fakeplayer skip
+
     @Override
     public void updatePOIOnBlockStateChange(BlockPos pos, BlockState oldState, BlockState newState) {
         Optional<Holder<PoiType>> optional = PoiTypes.forState(oldState);
@@ -2796,6 +2803,11 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             // ServerLevel.this.getChunkSource().addEntity(entity); // Paper - ignore and warn about illegal addEntity calls instead of crashing server; moved down below valid=true
             if (entity instanceof ServerPlayer serverPlayer) {
                 ServerLevel.this.players.add(serverPlayer);
+                // Leaves start - skip
+                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot)) {
+                    ServerLevel.this.realPlayers.add(serverPlayer);
+                }
+                // Leaves end - skip
                 if (serverPlayer.isReceivingWaypoints()) {
                     ServerLevel.this.getWaypointManager().addPlayer(serverPlayer);
                 }
@@ -2883,6 +2895,11 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             ServerLevel.this.getChunkSource().removeEntity(entity);
             if (entity instanceof ServerPlayer serverPlayer) {
                 ServerLevel.this.players.remove(serverPlayer);
+                // Leaves start - skip
+                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot)) {
+                    ServerLevel.this.realPlayers.remove(serverPlayer);
+                }
+                // Leaves end - skip
                 ServerLevel.this.getWaypointManager().removePlayer(serverPlayer);
                 ServerLevel.this.updateSleepingPlayerList();
             }
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 4e868da7fb3dc6e033b83f55ec250d85e0b74f02..d57c22e8317644badf2e57749cc1e4d0ebc0f1e9 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -65,7 +65,6 @@ import net.minecraft.network.protocol.game.ClientboundHorseScreenOpenPacket;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
 import net.minecraft.network.protocol.game.ClientboundMerchantOffersPacket;
 import net.minecraft.network.protocol.game.ClientboundOpenBookPacket;
-import net.minecraft.network.protocol.game.ClientboundOpenScreenPacket;
 import net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerCombatEndPacket;
@@ -219,7 +218,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
     private static final boolean DEFAULT_SPAWN_EXTRA_PARTICLES_ON_FALL = false;
     public ServerGamePacketListenerImpl connection;
     private final MinecraftServer server;
-    public final ServerPlayerGameMode gameMode;
+    public ServerPlayerGameMode gameMode; // Leaves - final -> null
     private final PlayerAdvancements advancements;
     private final ServerStatsCounter stats;
     private float lastRecordedHealthAndAbsorption = Float.MIN_VALUE;
@@ -986,11 +985,14 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
             this.containerMenu.broadcastChanges();
             this.containerUpdateDelay = this.level().paperConfig().tickRates.containerUpdate;
         }
+        // Leaves start - skip bot
+        if (!(this instanceof org.leavesmc.leaves.bot.ServerBot)) {
         // Paper end - Configurable container update tick rate
         if (this.containerMenu != this.inventoryMenu && (this.isImmobile() || !this.containerMenu.stillValid(this))) { // Paper - Prevent opening inventories when frozen
             this.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE); // Paper - Inventory close reason
             this.containerMenu = this.inventoryMenu;
         }
+        } // Leaves end - skip bot
 
         Entity camera = this.getCamera();
         if (camera != this) {
@@ -1016,7 +1018,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
             }
         }
 
-        CriteriaTriggers.TICK.trigger(this);
+        if (!(this instanceof org.leavesmc.leaves.bot.ServerBot)) CriteriaTriggers.TICK.trigger(this); // Leaves - skip bot
         if (this.levitationStartPos != null) {
             CriteriaTriggers.LEVITATION.trigger(this, this.levitationStartPos, this.tickCount - this.levitationStartTime);
         }
@@ -1994,6 +1996,11 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
                 this.lastSentExp = -1;
                 this.lastSentHealth = -1.0F;
                 this.lastSentFood = -1;
+                // Leaves start - bot support
+                if (cn.lunadeer.mc.deerfoliaplus.configurations.DeerFoliaPlusConfiguration.fakePlayer.enable) {
+                    this.server.getBotList().bots.forEach(bot -> bot.sendFakeDataIfNeed(this, true)); // Leaves - render bot
+                }
+                // Leaves end - bot support
                 this.teleportSpectators(teleportTransition, serverLevel);
                 // CraftBukkit start
                 org.bukkit.event.player.PlayerChangedWorldEvent changeEvent = new org.bukkit.event.player.PlayerChangedWorldEvent(this.getBukkitEntity(), serverLevel.getWorld());
diff --git a/net/minecraft/server/players/PlayerList.java b/net/minecraft/server/players/PlayerList.java
index dd68471549096b86ea82f2add3d3886fb054e78b..935cfade582b9ae5b738ed759d92fc6c3b41360f 100644
--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -1,7 +1,6 @@
 package net.minecraft.server.players;
 
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import com.mojang.logging.LogUtils;
@@ -100,6 +99,8 @@ import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Team;
 import org.slf4j.Logger;
 
+import org.leavesmc.leaves.bot.ServerBot; // Leaves - bot support
+
 public abstract class PlayerList {
     public static final File USERBANLIST_FILE = new File("banned-players.json");
     public static final File IPBANLIST_FILE = new File("banned-ips.json");
@@ -421,6 +422,19 @@ public abstract class PlayerList {
                 //return; // Folia - region threading - must still allow the player to connect, as we must add to chunk map before handling disconnect
             }
 
+            // Leaves start - bot support
+            if (cn.lunadeer.mc.deerfoliaplus.configurations.DeerFoliaPlusConfiguration.fakePlayer.enable) {
+                ServerBot bot = this.server.getBotList().getBotByName(player.getScoreboardName());
+                if (bot != null) {
+                    this.server.getBotList().removeBot(bot, org.leavesmc.leaves.event.bot.BotRemoveEvent.RemoveReason.INTERNAL, player.getBukkitEntity(), false);
+                }
+                this.server.getBotList().bots.forEach(bot1 -> {
+                    bot1.sendPlayerInfo(player);
+                    bot1.sendFakeDataIfNeed(player, true);
+                }); // Leaves - render bot
+            }
+            // Leaves end - bot support
+
             final net.kyori.adventure.text.Component jm = playerJoinEvent.joinMessage();
 
             if (jm != null && !jm.equals(net.kyori.adventure.text.Component.empty())) { // Paper - Adventure
@@ -939,6 +953,12 @@ public abstract class PlayerList {
         }
         // Paper end - Add PlayerPostRespawnEvent
 
+        // Leaves start - bot support
+        if (cn.lunadeer.mc.deerfoliaplus.configurations.DeerFoliaPlusConfiguration.fakePlayer.enable) {
+            this.server.getBotList().bots.forEach(bot -> bot.sendFakeDataIfNeed(player, true)); // Leaves - render bot
+        }
+        // Leaves end - bot support
+
         // CraftBukkit end
 
         return serverPlayer;
@@ -1043,12 +1063,18 @@ public abstract class PlayerList {
 
     public String[] getPlayerNamesArray() {
         List<ServerPlayer> players = new java.util.ArrayList<>(this.players); // Folia - region threading
-        String[] strings = new String[this.players.size()];
+        String[] strings = new String[this.players.size() + this.server.getBotList().bots.size()]; // Leaves - fake player support
 
         for (int i = 0; i < players.size(); i++) { // Folia - region threading
             strings[i] = players.get(i).getGameProfile().getName(); // Folia - region threading
         }
 
+        // Leaves start - fake player support
+        for (int i = this.players.size(); i < strings.length; ++i) {
+            strings[i] = ((ServerPlayer) this.server.getBotList().bots.get(i - this.players.size())).getGameProfile().getName();
+        }
+        // Leaves end - fake player support
+
         return strings;
     }
 
@@ -1137,7 +1163,13 @@ public abstract class PlayerList {
 
     @Nullable
     public ServerPlayer getPlayerByName(String username) {
-        return this.playersByName.get(username.toLowerCase(java.util.Locale.ROOT)); // Spigot
+        // Leaves start - fake player support
+        ServerPlayer player = this.playersByName.get(username.toLowerCase(java.util.Locale.ROOT));
+        if (player == null) {
+            player = this.server.getBotList().getBotByName(username);
+        }
+        return player; // Spigot
+        // Leaves end - fake player support
     }
 
     public void broadcast(@Nullable Player except, double x, double y, double z, double radius, ResourceKey<Level> dimension, Packet<?> packet) {
@@ -1474,7 +1506,13 @@ public abstract class PlayerList {
 
     @Nullable
     public ServerPlayer getPlayer(UUID playerUUID) {
-        return this.playersByUUID.get(playerUUID);
+        // Leaves start - fake player support
+        ServerPlayer player = this.playersByUUID.get(playerUUID);
+        if (player == null) {
+            player = this.server.getBotList().getBot(playerUUID);
+        }
+        return player;
+        // Leaves start - fake player support
     }
 
     public boolean canBypassPlayerLimit(GameProfile profile) {
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index d5dbe66f6575da5edeb0c34587fddf354a67af9a..eb23aa28c7eb1ef10d0b46e169c614e7dcc0a7b9 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -1503,7 +1503,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
 
     // Paper start - optimise collisions
-    private Vec3 collide(Vec3 movement) {
+    public Vec3 collide(Vec3 movement) { // Leaves - private -> public
         final boolean xZero = movement.x == 0.0;
         final boolean yZero = movement.y == 0.0;
         final boolean zZero = movement.z == 0.0;
diff --git a/net/minecraft/world/entity/player/Player.java b/net/minecraft/world/entity/player/Player.java
index 73d1557f2d7d60a9a2ad2c3f710b0969c4c5cf40..196ce53141a2c458b9442858cfe8093a713ccbf1 100644
--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -205,7 +205,7 @@ public abstract class Player extends LivingEntity {
     private int lastLevelUpTime;
     public GameProfile gameProfile;
     private boolean reducedDebugInfo;
-    private ItemStack lastItemInMainHand = ItemStack.EMPTY;
+    protected ItemStack lastItemInMainHand = ItemStack.EMPTY; // Leaves - private -> protected
     private final ItemCooldowns cooldowns = this.createItemCooldowns();
     private Optional<GlobalPos> lastDeathLocation = Optional.empty();
     @Nullable
@@ -372,6 +372,12 @@ public abstract class Player extends LivingEntity {
         }
     }
 
+    // Leaves start - fake player
+    protected void livingEntityTick() {
+        super.tick();
+    }
+    // Leaves end - fake player
+
     @Override
     protected float getMaxHeadRotationRelativeToBody() {
         return this.isBlocking() ? 15.0F : super.getMaxHeadRotationRelativeToBody();
@@ -674,7 +680,7 @@ public abstract class Player extends LivingEntity {
         }
     }
 
-    private void touch(Entity entity) {
+    public void touch(Entity entity) { // Leaves - private -> public
         entity.playerTouch(this);
     }
 
diff --git a/net/minecraft/world/entity/projectile/FishingHook.java b/net/minecraft/world/entity/projectile/FishingHook.java
index 7760ab1fe365b4bf1ab6c2ff953e8659a28008a8..76f6b0932633bc5670a1cdc76ff78b3bc725401d 100644
--- a/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/net/minecraft/world/entity/projectile/FishingHook.java
@@ -58,7 +58,7 @@ public class FishingHook extends Projectile {
     public static final EntityDataAccessor<Integer> DATA_HOOKED_ENTITY = SynchedEntityData.defineId(FishingHook.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_BITING = SynchedEntityData.defineId(FishingHook.class, EntityDataSerializers.BOOLEAN);
     private int life;
-    private int nibble;
+    public int nibble; // Leaves - private -> public
     public int timeUntilLured;
     public int timeUntilHooked;
     public float fishAngle;
diff --git a/net/minecraft/world/inventory/AbstractContainerMenu.java b/net/minecraft/world/inventory/AbstractContainerMenu.java
index f4548edae77eb86e54ba499acbb20613fd60d7bd..4a7507072bd1df3a37b8b8652c5836cacade3dfa 100644
--- a/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -376,6 +376,9 @@ public abstract class AbstractContainerMenu {
 
     private void doClick(int slotId, int button, ClickType clickType, Player player) {
         Inventory inventory = player.getInventory();
+
+        if (!doClickCheck(slotId, button, clickType, player)) return; // Leaves - doClick check
+
         if (clickType == ClickType.QUICK_CRAFT) {
             int i = this.quickcraftStatus;
             this.quickcraftStatus = getQuickcraftHeader(button);
@@ -652,6 +655,22 @@ public abstract class AbstractContainerMenu {
         }
     }
 
+    // Leaves start - doClick check
+    private boolean doClickCheck(int slotIndex, int button, ClickType actionType, Player player) {
+        if (slotIndex < 0) {
+            return true;
+        }
+
+        Slot slot = getSlot(slotIndex);
+        ItemStack itemStack = slot.getItem();
+        net.minecraft.world.item.component.CustomData customData = itemStack.get(net.minecraft.core.component.DataComponents.CUSTOM_DATA);
+        if (customData != null && customData.copyTag().getBoolean("Leaves.Gui.Placeholder").isPresent()) {
+            return !customData.copyTag().getBoolean("Leaves.Gui.Placeholder").get();
+        }
+        return true;
+    }
+    // Leaves end - doClick check
+
     private boolean tryItemClickBehaviourOverride(Player player, ClickAction action, Slot slot, ItemStack clickedItem, ItemStack carriedItem) {
         FeatureFlagSet featureFlagSet = player.level().enabledFeatures();
         return carriedItem.isItemEnabled(featureFlagSet) && carriedItem.overrideStackedOnOther(slot, action, player)
diff --git a/net/minecraft/world/level/levelgen/PhantomSpawner.java b/net/minecraft/world/level/levelgen/PhantomSpawner.java
index 0cafe46e9a1b053c5e70f20a26b4402632d0f8bf..ccad9bd7849ed956cb8cd92a58bf7837a89eac98 100644
--- a/net/minecraft/world/level/levelgen/PhantomSpawner.java
+++ b/net/minecraft/world/level/levelgen/PhantomSpawner.java
@@ -49,6 +49,11 @@ public class PhantomSpawner implements CustomSpawner {
                                         ServerStatsCounter stats = serverPlayer.getStats();
                                         int i = Mth.clamp(stats.getValue(Stats.CUSTOM.get(Stats.TIME_SINCE_REST)), 1, Integer.MAX_VALUE);
                                         int i1 = 24000;
+                                        // Leaves start - fake player spawn
+                                        if (serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot bot && bot.getConfigValue(org.leavesmc.leaves.bot.agent.Configs.SPAWN_PHANTOM)) {
+                                            i1 = Math.max(bot.notSleepTicks, 1);
+                                        }
+                                        // Leaves end - fake player spawn
                                         if (randomSource.nextInt(i) >= 72000) {
                                             BlockPos blockPos1 = blockPos.above(20 + randomSource.nextInt(15))
                                                 .east(-10 + randomSource.nextInt(21))
diff --git a/net/minecraft/world/level/storage/LevelResource.java b/net/minecraft/world/level/storage/LevelResource.java
index bef794c3f58c41d910aa0bcc63fbdeea7225fddf..52b09d2fe36c2ca34361cfc667e81af053e4fbe1 100644
--- a/net/minecraft/world/level/storage/LevelResource.java
+++ b/net/minecraft/world/level/storage/LevelResource.java
@@ -15,9 +15,9 @@ public class LevelResource {
     public static final LevelResource ROOT = new LevelResource(".");
     private final String id;
 
-    private LevelResource(String id) {
+    public  LevelResource(String id) {
         this.id = id;
-    }
+    } // Leaves - private -> public
 
     public String getId() {
         return this.id;
diff --git a/net/minecraft/world/level/storage/PlayerDataStorage.java b/net/minecraft/world/level/storage/PlayerDataStorage.java
index fe44d8d17d2622b3d6021c11579af85ef96737bb..0aae211dc2048f8cd14213c2a868394d1ed16070 100644
--- a/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -19,7 +19,7 @@ import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.entity.player.Player;
 import org.slf4j.Logger;
 
-public class PlayerDataStorage {
+public class PlayerDataStorage implements org.leavesmc.leaves.bot.IPlayerDataStorage {
     private static final Logger LOGGER = LogUtils.getLogger();
     private final File playerDir;
     protected final DataFixer fixerUpper;
